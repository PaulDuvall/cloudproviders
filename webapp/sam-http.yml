AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'Serverless app using API Gateway, Lambda, and DynamoDB'
Globals:
  Function:
    Timeout: 120
    MemorySize: 128
  Api:
    EndpointConfiguration: REGIONAL
Resources:
  mySNSTopic:
    Type: 'AWS::SNS::Topic'
  HttpApiGetFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: LambdaGetDynamoDB
      Handler: index-get.handler
      Runtime: nodejs12.x
      CodeUri: src/
      Description: A function that reads from a DynamoDB table
      AutoPublishAlias: live
      MemorySize: 128
      DeploymentPreference:
        Type: CodeDeployDefault.LambdaLinear10PercentEvery1Minute
        Hooks:
          PreTraffic:
            Ref: PreTrafficTests
        TriggerConfigurations:
          - TriggerEvents:
              - DeploymentSuccess
              - DeploymentFailure
            TriggerName: TestThisTrigger
            TriggerTargetArn:
              Ref: mySNSTopic
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSCodeDeployRoleForLambda
        - DynamoDBReadPolicy:
            TableName:
              Ref: MyDynamoDBTable
      Environment:
        Variables:
          TABLE_NAME:
            Ref: MyDynamoDBTable
      Events:
        SimpleCase:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: MyApi
            Method: GET
            Path: /clouds
            TimeoutInMillis: 15000
        LogsProcessor:
          Type: CloudWatchLogs
          Properties:
            LogGroupName:
              Ref: CloudWatchLambdaLogsGroup
            FilterPattern: ''
  HttpApiPutFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: LambdaWriteDynamoDB
      Handler: index-put.handler
      Runtime: nodejs12.x
      CodeUri: src/
      Description: A function that writes to a DynamoDB table
      Policies:
        - AWSLambdaExecute
        - DynamoDBWritePolicy:
            TableName:
              Ref: MyDynamoDBTable
  MyDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    DeletionPolicy: Delete
    Properties:
      TableName: CloudProviders
      AttributeDefinitions:
        - AttributeName: ServiceName
          AttributeType: S
        - AttributeName: id
          AttributeType: 'N'
      KeySchema:
        - AttributeName: ServiceName
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  MyApi:
    Type: 'AWS::Serverless::HttpApi'
    Properties:
      CorsConfiguration:
        AllowOrigins:
          - '*'
  CloudWatchLambdaLogsGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 7
  CloudWatchLambdaLogsStream:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName:
        Ref: CloudWatchLambdaLogsGroup
      LogStreamName: cloudproviders-log-stream
  PreTrafficTests:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: PreTrafficTests
      Handler: preTrafficHook.handler
      CodeUri: src/
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'codedeploy:PutLifecycleEventHookExecutionStatus'
              Resource:
                'Fn::Sub': >-
                  arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${ServerlessDeploymentApplication}/*
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'lambda:InvokeFunction'
              Resource:
                'Fn::GetAtt':
                  - HttpApiGetFunction
                  - Arn
      Runtime: nodejs12.x
      DeploymentPreference:
        Enabled: false
      Environment:
        Variables:
          CurrentVersion:
            Ref: HttpApiGetFunction.Version
Outputs:
  PutDataLambdaFunctionUrl:
    Description: Link for Lambda Function that puts data into DDB Table
    Value:
      'Fn::Sub': >-
        https://console.aws.amazon.com/lambda/home?region=us-east-1#/functions/${HttpApiPutFunction}
  GetDataApi:
    Description: API Gateway endpoint URL for Data Listing Function
    Value:
      'Fn::Sub': 'https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/clouds'
